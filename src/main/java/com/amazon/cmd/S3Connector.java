package com.amazon.cmd;import com.amazonaws.AmazonClientException;import com.amazonaws.AmazonServiceException;import com.amazonaws.ClientConfiguration;import com.amazonaws.auth.AWSCredentials;import com.amazonaws.auth.BasicAWSCredentials;import com.amazonaws.services.s3.AmazonS3Client;import com.amazonaws.services.s3.model.*;import com.fasterxml.jackson.annotation.JsonProperty;import org.joda.time.field.SkipDateTimeField;import java.io.*;import java.nio.file.attribute.AclEntryPermission;import java.security.acl.Acl;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Optional;import java.util.logging.Level;import java.util.logging.Logger;public class S3Connector {    private static String host;    private static String bucketName;    private static String publicKey;    private static String privateKey;    private static AmazonS3Client amazonS3;    private static final S3Connector connector = new S3Connector();    static final Logger s3Logger = Logger.getLogger(S3Connector.class.toString());    private S3Connector() { }    public static S3Connector Configure(ConnectionConfiguration connectionConfig) {        connector.setBucketName(connectionConfig.getBucketNameConfig());        connector.setHost(connectionConfig.getHostConfig());        connector.setPublicKey(publicKey = connectionConfig.getPublicKeyConfig());        connector.setPrivateKey(connectionConfig.getPrivateKeyConfig());        return connector;    }    public static S3Connector S3ConnectionBuilder() throws AmazonServiceException {        AWSCredentials credentials = new BasicAWSCredentials(connector.getPublicKey(), connector.getPrivateKey());        ClientConfiguration configuration = new ClientConfiguration();        configuration.setSignerOverride("S3SignerType");        amazonS3 = new AmazonS3Client(credentials, configuration);        amazonS3.setEndpoint(host);        return connector;    }    public List<Bucket> getBuckets() throws AmazonClientException {        List<Bucket> list = amazonS3.listBuckets();        System.out.println("FOUND "+list.size()+ " FILES:");        return list;    }    public void createBucket(String bucket) throws AmazonClientException{        if(amazonS3.doesBucketExist(bucket)){            throw new AmazonClientException("Bucket " + bucket+ " already exists.");        } else {            CreateBucketRequest createBucketRequest = new CreateBucketRequest(bucket);            amazonS3.createBucket(createBucketRequest);            s3Logger.log(Level.INFO,"Bucket "+bucket+" created.");        }    }    public void getInfo(String bucket,String s3Key) throws AmazonClientException {        if (amazonS3.doesObjectExist(bucket, s3Key)) {            List<S3ObjectSummary> result = Optional.ofNullable(this.getDirectory(s3Key))                    .orElseGet(()->Collections.emptyList());            result.forEach(cons-> {                System.out.println("CHECKING INFO FOR:\n"+cons.getKey()+" in "+this.getBucketName());                this.getObjectPermissions(bucket,cons.getKey())                        .forEach(permission->                                System.out.println(permission.getPermission().getHeaderName()                                ));//                    S3Object s3Object  = amazonS3.getObject(new GetObjectRequest(bucketName, cons.getKey()));//                    info.add(s3Object.getObjectMetadata().getContentType()+"\n"+//                            s3Object.getObjectMetadata().getContentLength()+"\n"+//                            s3Object.getObjectMetadata().getPartCount());//                    );            });        } else {            throw new com.amazonaws.AmazonClientException("Object " + s3Key + " not found");        }    }    public void getFile(String s3Key, String destination) throws AmazonClientException {        if (amazonS3.doesObjectExist(this.getBucketName(), s3Key)) {            List<S3ObjectSummary> result = Optional.ofNullable(this.getDirectory(s3Key))                    .orElseGet(()->Collections.emptyList());            result.forEach(cons-> {                System.out.println("DOWNLOADING:\n"+cons.getKey()+" from "+this.getBucketName());                S3ObjectInputStream s3Sis = amazonS3.getObject(                        new GetObjectRequest(this.getBucketName(), cons.getKey())).getObjectContent();                try {                    FileOutputStream fos = new FileOutputStream(                            new File(destination+cons.getKey()));                    byte[] buffer = new byte[10 * 1024];                    int bytesRead;                    while ((bytesRead = s3Sis.read(buffer)) != -1) {                        fos.write(buffer, 0, bytesRead);                    }                    s3Sis.close();                    fos.close();                } catch (IOException e) {                    s3Logger.log(Level.WARNING, "File error: " + e.getLocalizedMessage());                }//                    S3Object s3Object  = amazonS3.getObject(new GetObjectRequest(bucketName, cons.getKey()));//                    info.add(s3Object.getObjectMetadata().getContentType()+"\n"+//                            s3Object.getObjectMetadata().getContentLength()+"\n"+//                            s3Object.getObjectMetadata().getPartCount());//                    );            });            System.out.println(result.size()+" FILES COPIED.");        } else {            throw new com.amazonaws.AmazonServiceException("Object " + s3Key + " not found");        }    }    public void putFile(String source, String s3Key) throws AmazonClientException{        S3Object s3Object = new S3Object();        File file = null;        s3Logger.log(Level.SEVERE,"Attempting to read from "+source);        try {            file = new File(source);            if(!file.exists()) throw new FileNotFoundException();        } catch (FileNotFoundException e) {            s3Logger.log(Level.WARNING, "File not found: " + e.getLocalizedMessage());        }        s3Logger.log(Level.SEVERE,"Attempting to write "+source+" to Amazon S3");        String fileObjKeyName= amazonS3.getBucketLocation(getBucketName())+"/"+                source.substring(source.lastIndexOf(File.separator)+1);        s3Object.setBucketName(getBucketName());        s3Object.setKey(fileObjKeyName);        PutObjectRequest request = new PutObjectRequest(getBucketName(), fileObjKeyName, file);        ObjectMetadata metadata = new ObjectMetadata();        metadata.setContentType("plain/text");        metadata.addUserMetadata("x-amz-meta-title", "fileTitle");        request.setMetadata(metadata);        s3Logger.log(Level.SEVERE,"File copied to bucket "+getBucketName()+":"+s3Object.getKey());        amazonS3.putObject(request);    }    public List<S3ObjectSummary> getDirectory(String prefix) throws AmazonClientException {        List<S3ObjectSummary> list;        if (prefix.equals("/")) {            list = amazonS3.listObjectsV2(this.getBucketName()).getObjectSummaries();        } else {            list = amazonS3.listObjectsV2(this.getBucketName(), prefix).getObjectSummaries();        }        System.out.println("FOUND "+list.size()+ " FILES:");        return list;    }    public List<Grant> getBucketPermissions(String bucket) throws AmazonClientException {        List<Grant> grants = Collections.emptyList();        s3Logger.log(Level.SEVERE, "Permissions for " + bucket + ":");        AccessControlList acl  = amazonS3.getBucketAcl(bucket);        grants = acl.getGrantsAsList();        return grants;    }    public void setBucketPermissions(String bucket, String access, String email) throws AmazonClientException {        s3Logger.log(Level.SEVERE,"Setting permissions ("+access+") for "+email+" in "+bucket+".");        AccessControlList acl=amazonS3.getBucketAcl(bucket);        EmailAddressGrantee grantee = new EmailAddressGrantee(email);        Permission permission = Permission.valueOf(access);        acl.grantPermission(grantee, permission);        amazonS3.setBucketAcl(bucket, acl);    }    public List<Grant> getObjectPermissions(String bucket, String s3Key) throws AmazonClientException {        AccessControlList acl = null;        List<Grant> grants= Collections.emptyList();        s3Logger.log(Level.INFO,"Permissions for "+s3Key+" in bucket "+bucket+":");        acl = amazonS3.getObjectAcl(bucket, s3Key);        grants = acl.getGrantsAsList();        return grants;    }    public void setObjectPermissions(            String bucket, String s3Key, String access, String email) throws AmazonClientException {        AccessControlList acl = null;        List<Grant> grants= Collections.emptyList();        s3Logger.log(Level.SEVERE,"Setting permissions ("+access+") for "+email+" in "+bucket+".");        EmailAddressGrantee grantee = new EmailAddressGrantee(email);        Permission permission = Permission.valueOf(access);        acl.grantPermission(grantee, permission);        amazonS3.setObjectAcl(bucket, s3Key, acl);    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host=host;    }    public String getBucketName() {        return bucketName;    }    public void setBucketName(String bucketName) {        this.bucketName = bucketName;    }    public String getPublicKey() {return publicKey;}    public void setPublicKey(String publicKey) {        this.publicKey = publicKey;    }    public String getPrivateKey() {        return privateKey;    }    public void setPrivateKey(String privateKey) {        this.privateKey = privateKey;    }}